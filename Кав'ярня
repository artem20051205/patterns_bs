# Абстракція: Кав'ярня
class Кавярня:
    def __init__(self, приготувальник_кави):
        self.приготувальник_кави = приготувальник_кави

    def замовити_каву(self):
        print("Замовлення кави...")
        self.приготувальник_кави.варити()

# Реалізація: Способи приготування кави
class ПриготувальникКави:
    def варити(self):
        pass  # Абстрактний метод

class ПриготувальникЕспресо(ПриготувальникКави):
    def варити(self):
        print("Варю еспресо")

class ПриготувальникЛатте(ПриготувальникКави):
    def варити(self):
        print("Варю латте")

# Реалізація: Види напоїв
class ПриготувальникКапучино(ПриготувальникКави):
    def варити(self):
        print("Варю капучино")

class ПриготувальникАмерикано(ПриготувальникКави):
    def варити(self):
        print("Варю американо")

# Використання паттерну Bridge
# Кав'ярня з ПриготувальникЕспресо
кав_ярня_з_еспресо = Кавярня(ПриготувальникЕспресо())
кав_ярня_з_еспресо.замовити_каву()

# Кав'ярня з ПриготувальникЛатте
кав_ярня_з_латте = Кавярня(ПриготувальникЛатте())
кав_ярня_з_латте.замовити_каву()

# Кав'ярня з ПриготувальникКапучино
кав_ярня_з_капучино = Кавярня(ПриготувальникКапучино())
кав_ярня_з_капучино.замовити_каву()

# Кав'ярня з ПриготувальникАмерикано
кав_ярня_з_американо = Кавярня(ПриготувальникАмерикано())
кав_ярня_з_американо.замовити_каву()
